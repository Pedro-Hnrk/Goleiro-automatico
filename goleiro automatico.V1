#include <ESP32Servo.h>

// Definição dos sensores por quadrante
#define TRIG_Q1 25
#define ECHO_Q1 26
#define TRIG_Q2 5
#define ECHO_Q2 18
#define TRIG_Q3 34
#define ECHO_Q3 35
#define TRIG_Q4 22
#define ECHO_Q4 23
#define TRIG_Q5 32
#define ECHO_Q5 33
#define TRIG_Q6 2
#define ECHO_Q6 4

#define SERVO_PIN 14    // Pino PWM válido para o servo


Servo goleiro;
const int distanciaDefesa = 25; // cm

void setup() {
  // Configura os pinos dos sensores como entrada e saída
  int trigPins[] = {TRIG_Q1, TRIG_Q2, TRIG_Q3, TRIG_Q4, TRIG_Q5, TRIG_Q6};
  int echoPins[] = {ECHO_Q1, ECHO_Q2, ECHO_Q3, ECHO_Q4, ECHO_Q5, ECHO_Q6};

  for (int i = 0; i < 6; i++) {
    pinMode(trigPins[i], OUTPUT);
    pinMode(echoPins[i], INPUT);
  }

  pinMode(LED_PIN, OUTPUT);
  pinMode(BUZZER_PIN, OUTPUT);

  goleiro.setPeriodHertz(50);  // Frequência padrão de servo
  goleiro.attach(SERVO_PIN, 500, 2400); // Min e max pulse width (us)
  goleiro.write(90);

  Serial.begin(115200); // Taxa maior para ESP32
}

long medirDistancia(int trigPin, int echoPin) {
  digitalWrite(trigPin, LOW);
  delayMicroseconds(2);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  long duracao = pulseIn(echoPin, HIGH, 30000); // timeout de 30ms
  if (duracao == 0) return -1;
  return duracao * 0.034 / 2;
}

void tocarImpactoEAplausos() {
  digitalWrite(BUZZER_PIN, HIGH);
  delay(100);
  digitalWrite(BUZZER_PIN, LOW);
}

void defenderQuadrante(int quadrante) {
  digitalWrite(LED_PIN, HIGH);
  tocarImpactoEAplausos();

  int angulo = 90;
  switch (quadrante) {
    case 1: angulo = 150; break;   // Alta esquerda
    case 2: angulo = 30; break;    // Alta direita
    case 3: angulo = 120; break;   // Média esquerda
    case 4: angulo = 60; break;    // Média direita
    case 5: angulo = 180; break;   // Baixa esquerda
    case 6: angulo = 0; break;     // Baixa direita
  }

  goleiro.write(angulo);
  delay(300);
  goleiro.write(90);
  digitalWrite(LED_PIN, LOW);
  digitalWrite(BUZZER_PIN, LOW);
}

void loop() {
  int trigPins[] = {TRIG_Q1, TRIG_Q2, TRIG_Q3, TRIG_Q4, TRIG_Q5, TRIG_Q6};
  int echoPins[] = {ECHO_Q1, ECHO_Q2, ECHO_Q3, ECHO_Q4, ECHO_Q5, ECHO_Q6};

  for (int i = 0; i < 6; i++) {
    long distancia = medirDistancia(trigPins[i], echoPins[i]);
    Serial.print("Q"); Serial.print(i + 1); Serial.print(": "); Serial.println(distancia);

    if (distancia > 0 && distancia <= distanciaDefesa) {
      defenderQuadrante(i + 1);
    }
  }

  delay(100);
}
